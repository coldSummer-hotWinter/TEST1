1. 正则表达式常用的匹配规则
    \w: 匹配字母、数字、下划线。
    \W: 匹配不是字母、数字、下划线。
    \s: 匹配一个的空白字符。
    \S: 匹配一个的非空字符。
    \d: 匹配[0-9]的数字。（digit）
    \D: 匹配非数字的字符。
    \z: 匹配字符串的结尾。如果有换行符，包括换行符。
    \Z: 匹配字符串的结尾。如果有换行符，不包括换行符。

    \A: 匹配字符串的开头。
    \G: 匹配最后匹配完成的位置。

    \n: 匹配一个换行符。
    \t: 匹配一个制表符。
    ^ : 匹配一行字符串的开头。格式为^字符串。
    $ : 匹配一行字符串的结尾。格式为字符串$。
    . : 匹配任意字符，除了换行符。
    * : 匹配0个或多个表达式。格式为表达式*。
    + : 匹配1个或多个表达式。格式为表达式+。
    ? : 匹配0个或1个前面的正则表达式定义的片段，非贪婪模式。

    (): 匹配括号里的子表达式。括号里的子表达式对应一个分组。通过group(num)提取分组。
    [...]: 表示匹配里面的一组字符。
    [^..]: 表示不匹配里面的一组字符。
    {n}: 匹配n个前面的表达式。
    {n, m}: 匹配n到m次，由前面的正则表达式定义的片段，贪婪模式。
    a|b: 匹配a或b。

2. .match(str_regex, string)
    功能：根据正则表达式从头匹配字符串。
    方法：通过re调用并输入参数。并返回re.Match对象。

3. .group(num)
    功能：输出匹配的内容。
    方法：通过re.Match对象调用。输入num提取分组。

4. .span()
    功能：输出匹配的范围。
    方法：通过re.Match对象调用。

5. 贪婪模式
    功能：尽可能匹配更多的字符。

6. 非贪婪模式
    功能：尽可能匹配更少的字符。
    方法：在已经定义过的表达式后面加上?。

7. 修饰符：
    功能：使用修饰符控制匹配模式。
    方法：re.I:使匹配对大小写不敏感。
         re.L:使本地化识别匹配。
         re.M:多行匹配，影响^、$。
         re.S:使.匹配所有字符，包括换行符。
         re.U:根据Unicode解析字符，会影响\w \W \b \B。
         re.X:提供灵活的格式，便于将正则表达式易于理解。

8. .search(str_regex, string)
    功能：扫描整个字符串，返回第一个匹配的子字符串。若没有找到匹配的内容，返回None。
    方法：通过re调用并输入参数。并返回re.Match对象。

9. .findall(str_regex, string)
    功能：扫描整个字符串，匹配所有符合规则的子字符串，返回由元组组成的列表，元组的内容由分组组成。若没有匹配的内容，返回None。
    方法：通过re调用并输入参数。并返回re.Match对象。

10. .sub(pattern, rep, string)
    pattern: 正则表达式的字符串。
    rep: 将符合的子字符替换成rel。
    string: 要匹配的字符串。
    功能：扫描整个字符串，将字符串的部分子字符串进行替换。
    方法：通过re调用并输入参数。并返回re.Match对象。

11. .compile(str_regex)
    功能：将正则表达式的字符串编译成正则表达式的对象，方便复用。
    方法：通过re调用并输入参数，返回re.Pattern对象。

12.学习心得：
    第一：访问元素里没有的特性，会报KeyError错误。
    第二：使用正则表达式，没有匹配到内容会返回None。
    第三：访问元素里的特性，要用元素加中括号，中括号输入字符串形式的特性名。
          例如：link['href']或link.attrs['href']